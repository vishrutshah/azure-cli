# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .rule_condition import RuleCondition


class ManagementEventRuleCondition(RuleCondition):
    """A management event rule condition.

    :param odata.type: Polymorphic Discriminator
    :type odata.type: str
    :param data_source: the resource from which the rule collects its data.
     For this type dataSource will always be of type
     RuleManagementEventDataSource.
    :type data_source: :class:`RuleDataSource
     <InsightsMgmt.models.RuleDataSource>`
    :param aggregation: How the data that is collected should be combined
     over time and when the alert is activated. Note that for management
     event alerts aggregation is optional â€“ if it is not provided then any
     event will cause the alert to activate.
    :type aggregation: :class:`ManagementEventAggregationCondition
     <InsightsMgmt.models.ManagementEventAggregationCondition>`
    """ 

    _validation = {
        'odata.type': {'required': True},
    }

    _attribute_map = {
        'odata.type': {'key': 'odata.type', 'type': 'str'},
        'data_source': {'key': 'dataSource', 'type': 'RuleDataSource'},
        'aggregation': {'key': 'aggregation', 'type': 'ManagementEventAggregationCondition'},
    }

    def __init__(self, data_source=None, aggregation=None):
        super(ManagementEventRuleCondition, self).__init__()
        self.data_source = data_source
        self.aggregation = aggregation
        self.odata.type = 'Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition'
